{"scratchpad": {"guidelinesUrlPath": "/computer-programming/guidelines/pjs", "contentKindCode": "p", "newUrlPath": "/computer-programming/new/pjs", "isPublished": false, "hideFromHotlist": false, "relativeUrl": "/computer-programming/generative-art-branches/6353011494486016", "originScratchpadId": 6223097608929280, "projectEval": null, "height": 400, "canvasOnly": false, "originSimilarity": 0.20096751900483759, "id": 6353011494486016, "definitelyNotSpam": false, "description": "", "category": null, "originRevisionId": 5741031244955648, "title": "Generative Art: Branches", "translatedProjectEval": null, "sendToPeers": false, "slug": "generative-art-branches", "isChallenge": false, "spinoffCount": 0, "descriptionHtml": "", "youtubeId": null, "docsUrlPath": "/computer-programming/docs/pjs", "contentKind": "Scratchpad", "type": "scratchpad", "revision": {"tests": "", "code": "/***\n * AUTHOR : ThinkInvisible\n * DATE   : 6/11/2015\n * PROGRAM: Branches\n * VERSION: 1.2\n * DESCRIPTION:\n    Entry for the Generative Art contest.\n    Draws a continuous series of branching lines across the screen and scrolls to follow an active branch.\n * ABOUT ME:\n    I'm currently waiting for my second year as an electrical engineering major at a small Wisconsin college. I've always been interested in programming because a computer can do so many different things -- and something in my brain really enjoys chasing bugs around as they leave ten times as many in their wake! I've spent a lot of time writing little Javascript and C# programs just to prove a concept or to make something neat to look at for a few minutes.\n * OTHER ENTRIES:\n    Crystallizer      - https://www.khanacademy.org/computer-programming/generative-art-crystallizer/4652523833131008\n    Cellular Automata - https://www.khanacademy.org/computer-programming/generative-art-cellular-automata/5085736565080064\n * SOURCES:\n * CHANGELOG:\n    ####### 1.0 [ 6/11/2015]\n        Initial version.\n    ####### 1.1 [ 6/12/2015]\n        Displays a smaller version of the image in the background.\n        Fixed transparency.\n        Added 3D drawing mode to fix issues with fadeToMinimap.\n    ####### 1.2 [ 6/12/2015]\n        Implemented a fixed timestep.\n        Fixed inaccuracy with 3D fadeToMinimap.\n * ISSUES:\n    Deletion and focus switching code is a little touchy.\n    fadeToMinimap has an unwanted exponential factor in 2D mode.\n***/\n\n//PROGRAM OPTIONS//\nvar targetBranches = 8; //number of live branches after which new branches will become rarer\nvar maxBranches = 40; //number of live branches after which no more can be created\nvar splitChanceLeft = 0.7; //decimal chance to create a branch to the left on death\nvar splitChanceRight = 0.7; //decimal chance to create a branch to the right on death\nvar splitChanceCenter = 0.15; //decimal chance to create a branch straight forwards on death\nvar splitPeriod = 750; //time between splits\nvar defaultSize = 30; //branch length\nvar defaultAngle = 45; //angle between left- and right-facing branches (turn angle is half of this)\nvar killOffscreen = false; //if true, dead branches that pass offscreen (including the trails of active branches!) will be deleted. --NOT SAFE FOR 3D MODE--\nvar killOld = splitPeriod*50; //if greater than 0, number of milliseconds before a dead branch disappears\nvar minimapMode = 2; //0: no minimap, 1: minimap, 2: connect minimap to normal image (active only), 3: connect minimap to normal image (all)\nvar minimapScale = 1/15; //how large the minimap is compared to the actual image.\nvar fadeToMinimap = true; //branches 'fall' towards the minimap as they become older. killOld must be greater than 0.\nvar timestep = 50; //amount of time the program is allowed to simulate at once.\nvar maxTimestep = timestep*4; //maximum amount of time the program is allowed to simulate per frame.\n\n//3D SETUP//\nvar ThreeD = true; //makes use of P3D for rendering; enable if using fadeToMinimap and the exponential falloff bothers you\nvar canvas;\nvar camHeight = 100;\nvar camFoV = 70 * PI / 180;\nvar minimapDistance = -3000;\nvar fadeDistance = -500;\nif(ThreeD) {\n    canvas = createGraphics(width, height, P3D);\n    canvas.angleMode = \"RADIANS\";\n}\n\n//SUPPORT/CLASSES//\nvar lastFrame = 0;\nvar thisFrame = 0;\nvar tAccum = 0;\nvar lFActual;\nvar tFActual = millis();\nvar scrX = 0;\nvar scrY = 0;\nvar scrXactual = 0;\nvar scrYactual = 0;\nvar focus = 0;\nvar branches = [];\nvar branch = function(foc, pos, dir, siz, ang, tim) {\n    this.focus = foc;\n    this.position = pos.get();\n    this.endpoint = pos.get();\n    this.direction = dir;\n    this.size = siz;\n    this.splitAng = ang;\n    this.time = tim;\n    this.progress = 0;\n    this.dead = false;\n    this.deleteFlag = false;\n    this.couldntfocus=false;\n    this.birthday=thisFrame;\n};\nvar addDefaultBranch = function(parent,dirtype) {\n    if(parent === undefined) {\n        branches.push(new branch(\n            random()*0.5+0.5,\n            ThreeD?new PVector(0,0,0):new PVector(width/2,height/2),\n            floor(random(0,360)/defaultAngle*2)*defaultAngle/2,\n            defaultSize,\n            defaultAngle,\n            splitPeriod));\n    } else {\n        branches.push(new branch(\n            random()*0.5+0.5,\n            parent.endpoint.get(),\n            parent.direction+(dirtype===0?-parent.splitAng/2:(dirtype===1?parent.splitAng/2:0)),\n            parent.size,\n            parent.splitAng,\n            parent.time));\n    }\n};\nbranch.prototype.update = function(deltaT, activeBranchCount, hasFocus) {\n    if(hasFocus) {scrX = this.endpoint.x-(ThreeD?0:height/2);scrY = this.endpoint.y-(ThreeD?0:width/2);}\n    var abc = activeBranchCount;\n    if(this.dead) {\n        if(ThreeD) {\n            var d = deltaT/killOld*fadeDistance;\n            this.position.z += d;\n            if(thisFrame - this.birthday >= this.time*2) {this.endpoint.z += d;}\n        }\n        if((killOffscreen && (this.endpoint.x > scrX + width || this.endpoint.x < scrX) && (this.endpoint.y > scrY + height || this.endpoint.y < scrY) &&\n           (this.position.x > scrX + width || this.position.x < scrX) && (this.position.y > scrY + height || this.position.y < scrY)) ||\n           (killOld > 0 && thisFrame - this.birthday > killOld)) {\n            this.deleteFlag = true;\n        } else if(killOld > 0 && thisFrame - this.birthday > killOld - this.time) {\n            this.progress -= deltaT;\n            this.position.x = this.endpoint.x + this.size * cos(this.direction+180) * this.progress/this.time;\n            this.position.y = this.endpoint.y + this.size * sin(this.direction+180) * this.progress/this.time;\n        }\n    } else {\n        this.progress += deltaT;\n        this.endpoint.x = this.position.x + this.size * cos(this.direction) * this.progress/this.time;\n        this.endpoint.y = this.position.y + this.size * sin(this.direction) * this.progress/this.time;\n        if(this.progress >= this.time) {\n            this.progress = this.time;\n            abc = abc - 1;\n            var fc = false;\n            var firstDir = floor(random(0,2.99999999999999999999));\n            var secondDir = floor(random(0,1.99999999999999999999)); if(firstDir === secondDir) {secondDir = 2;}\n            var thirdDir = firstDir === 0 ? (secondDir === 1 ? 2 : 1) : (firstDir === 1 ? (secondDir === 0 ? 2 : 0) : (secondDir === 0 ? 1 : 0));\n            var falloff = max(maxBranches-abc,0)/(maxBranches-targetBranches);\n            if(random(0,1)<falloff*(firstDir===0?splitChanceLeft:(firstDir===1?splitChanceRight:splitChanceCenter)) && abc < maxBranches) {\n                addDefaultBranch(this,firstDir);\n                abc = abc + 1;\n                if(this.hasFocus) {focus = branches.length-1;fc=true;}\n            }\n            falloff = max(maxBranches-abc,0)/(maxBranches-targetBranches);\n            if(random(0,1)<falloff*(secondDir===0?splitChanceLeft:(secondDir===1?splitChanceRight:splitChanceCenter)) && abc < maxBranches) {\n                addDefaultBranch(this,secondDir);\n                abc = abc + 1;\n                if(this.hasFocus) {focus = branches.length-1;fc=true;}\n            }\n            falloff = max(maxBranches-abc,0)/(maxBranches-targetBranches);\n            if((random(0,1)<falloff*(thirdDir===0?splitChanceLeft:(thirdDir===1?splitChanceRight:splitChanceCenter)) && abc < maxBranches) || abc < 1) {\n                addDefaultBranch(this,thirdDir);\n                abc = abc + 1;\n                if(this.hasFocus) {focus = branches.length-1;fc=true;}\n            }\n            if(this.hasFocus && !fc) {this.couldntfocus = true;}\n            this.dead = true;\n        }\n    }\n    return abc;\n};\nbranch.prototype.draw = function() {\n    stroke(255,255,255,this.focus*255);\n    if(fadeToMinimap && killOld > 0) {\n        var fade1 = (millis()-this.birthday+splitPeriod)/killOld;\n        var fade2 = (millis()-this.birthday)/killOld;\n        strokeWeight(max(((1-this.focus)*5+1)*(1-fade1),0.1));\n        //line();\n        line(\n            lerp(this.position.x,this.position.x * minimapScale + scrXactual * (1 - minimapScale) + width/2,fade1),\n            lerp(this.position.y,this.position.y * minimapScale + scrYactual * (1 - minimapScale) + height/2,fade1),\n            lerp(this.endpoint.x,this.endpoint.x * minimapScale + scrXactual * (1 - minimapScale) + width/2,fade2),\n            lerp(this.endpoint.y,this.endpoint.y * minimapScale + scrYactual * (1 - minimapScale) + height/2,fade2)\n            );\n    } else {\n        strokeWeight((1-this.focus)*5+1);\n        line(this.position.x,this.position.y,this.endpoint.x,this.endpoint.y);\n    }\n};\nbranch.prototype.drawmm = function() {\n    stroke(125,125,125);\n    strokeWeight(0.5/minimapScale);\n    line(this.position.x,this.position.y,this.endpoint.x,this.endpoint.y);\n};\nbranch.prototype.drawmmconn = function() {\n    stroke(125,125,125,80);\n    strokeWeight(1);\n    line(this.endpoint.x,this.endpoint.y,this.endpoint.x * minimapScale + scrXactual * (1 - minimapScale) + width/2,this.endpoint.y * minimapScale + scrYactual * (1 - minimapScale) + height/2);\n};\nbranch.prototype.draw3d = function() {\n    canvas.stroke(255, 255, 255);\n    canvas.noFill();\n    canvas.beginShape();\n    canvas.vertex(this.position.x,this.position.y,this.position.z);\n    canvas.vertex(this.endpoint.x,this.endpoint.y,this.endpoint.z);\n    if(minimapMode === 3 || (minimapMode === 2 && !this.dead)) {\n        canvas.stroke(65,65,65);\n        canvas.vertex(this.endpoint.x,this.endpoint.y,this.endpoint.z);\n        canvas.vertex(this.endpoint.x,this.endpoint.y,minimapDistance);\n        canvas.vertex(this.position.x,this.position.y,minimapDistance);\n        canvas.endShape();\n    } else if(minimapMode > 0) {\n        canvas.endShape();\n        canvas.stroke(65,65,65);\n        canvas.beginShape();\n        canvas.vertex(this.position.x,this.position.y,minimapDistance);\n        canvas.vertex(this.endpoint.x,this.endpoint.y,minimapDistance);\n        canvas.endShape();\n    } else {canvas.endShape();}\n};\n\n//MAIN PROGRAM//\nvar activeCount = 0;\nvar populateBranches = function() {\n    for(var i = 0; i < targetBranches; i++) {\n        addDefaultBranch();\n    }\n    activeCount += targetBranches;\n};\npopulateBranches();\nbackground(0);\nvar update = function() {\n    lFActual = tFActual;\n    lastFrame = thisFrame;\n    tFActual = millis();\n    tAccum += tFActual-lFActual;\n    tAccum = min(tAccum,maxTimestep);\n    while(tAccum > timestep) {\n        tAccum -= timestep;\n        lastFrame = thisFrame;\n        thisFrame += timestep;\n        scrXactual = lerp(scrXactual, scrX, min(2*timestep/1000,1));\n        scrYactual = lerp(scrYactual, scrY, min(2*timestep/1000,1));\n        if(branches.length === 0) {populateBranches();}\n        for(var i = 0; i < branches.length; i++) {\n            activeCount = branches[i].update(timestep,activeCount,focus===i);\n        }\n        if(focus >= branches.length || branches[focus].couldntfocus || branches[focus].dead) {\n        var newfocus = false;\n        for(var i = 0; i < branches.length; i++) {\n            if(!branches[i].dead) {newfocus=true;focus=i;break;}\n        }\n    }\n    for(var i = branches.length-1; i >= 0; i--) {\n        if(branches[i].deleteFlag) {branches.splice(i,1);if(i<focus){focus--;}i--;}\n    }\n    }\n};\n\nvar draw = function() {\n    update();\n    \n    background(0);\n    if(ThreeD) {\n        if(!canvas) {return;} //wait until P3D initializes, if applicable\n        canvas.hint(ENABLE_DEPTH_SORT);\n        canvas.beginDraw();\n        canvas.background(0, 0, 0, 0);\n        canvas.perspective(camFoV, width/height, 0.001, 10000);\n        canvas.camera(\n            //POSITION\n            scrXactual,\n            scrYactual,\n            camHeight,\n            //EYE VECTOR\n            scrXactual,\n            scrYactual,\n            0,\n            //UP VECTOR\n            0,\n            1,\n            0\n        );\n        canvas.noLights();\n        for(var i = 0; i < branches.length; i++) {\n            branches[i].draw3d();\n        }\n        canvas.endDraw();\n        image(canvas,0,0,width,height);\n    } else {\n        if(minimapMode > 0) {\n            translate(width/2,height/2);\n            scale(minimapScale);\n            translate(-scrXactual,-scrYactual);\n            for(var i = 0; i < branches.length; i++) {\n                branches[i].drawmm();\n            }\n            /*fill(0,0,0,80);\n            rect(0,0,width,height);*/\n            translate(scrXactual,scrYactual);\n            scale(1/minimapScale);\n            translate(-width/2,-height/2);\n        }\n        translate(-scrXactual,-scrYactual);\n        if(minimapMode > 1) {\n            for(var i = 0; i < branches.length; i++) {\n                if(minimapMode > 2 || !branches[i].dead) {branches[i].drawmmconn();}\n            }\n        }\n        for(var i = 0; i < branches.length; i++) {\n            branches[i].draw();\n        }\n        resetMatrix();\n    }\n    text(activeCount + \" \" + branches.length,0,10);\n};\n", "created": "2015-06-12T23:58:59Z", "folds": [], "translatedMp3Url": "", "hasAudio": false, "mp3Url": "", "editorType": "ace_pjs", "playback": "", "youtubeId": null, "configVersion": 4, "id": 5704837555552256}, "tests": "", "imagePath": "/computer-programming/generative-art-branches/6353011494486016/5704837555552256.png", "nodeType": "scratchpad", "editSlug": "edit/p/generative-art-branches", "isProject": false, "tags": [], "translatedDescription": "", "byChild": false, "difficulty": -1, "originIsProject": false, "key": "ag5zfmtoYW4tYWNhZGVteXIXCxIKU2NyYXRjaHBhZBiAgIiL_MCkCww", "date": "2015-06-12T23:58:59Z", "nodeSlug": "p/generative-art-branches", "kind": "Scratchpad", "termMap": {"new": "New Program", "guidelines": "Program Guidelines", "restart": "Restart"}, "translatedDescriptionHtml": "", "globalId": "p6353011494486016", "created": "2015-06-11T17:05:33Z", "url": "https://www.khanacademy.org/computer-programming/generative-art-branches/6353011494486016", "imageUrl": "https://www.khanacademy.org/computer-programming/generative-art-branches/6353011494486016/5704837555552256.png", "translatedTests": "", "sumVotesIncremented": 4, "defaultUrlPath": null, "flags": [], "isProjectOrFork": false, "userAuthoredContentType": "pjs", "kaid": "kaid_494369574895113984081090", "width": 400, "translatedTitle": "Generative Art: Branches"}, "embedded": false, "creatorProfile": {"isSelf": false, "username": "ThinkInvisible", "isParentOfLoggedInUser": false, "background": {"translatedDisplayName": "Photon Two", "imagePath": "/images/profile/backgrounds/bg-photon-2.jpg", "displayName": "Photon Two", "name": "photon-2", "thumbSrc": "https://cdn.kastatic.org/images/profile/backgrounds/bg-photon-2-preview.png", "translatedRequirements": ["Earn 100,000 energy points"], "rewardType": "profile_background", "thumbnailSrc": "https://cdn.kastatic.org/images/profile/backgrounds/bg-photon-2.jpg", "imageSrc": "https://cdn.kastatic.org/images/profile/backgrounds/bg-photon-2.jpg", "thumbPath": "/images/profile/backgrounds/bg-photon-2-preview.png", "thumbnailPath": ""}, "hasChangedAvatar": true, "soundOn": false, "followRequiresApproval": true, "canModifyCoaches": true, "dateJoined": "2013-12-17T16:56:48Z", "countBrandNewNotifications": 0, "isCurator": false, "isChildAccount": false, "isCreator": false, "childPageRoot": "/parent/child/ThinkInvisible/", "backgroundSrc": "https://cdn.kastatic.org/images/profile/backgrounds/bg-photon-2.jpg", "isDeveloper": false, "avatarName": "aqualine_ultimate_style", "affiliations": [], "isOrphan": false, "canEvalCsProjects": true, "globalPermissions": [], "profileRoot": "/profile/ThinkInvisible/", "email": "", "isPublic": true, "countVideosCompleted": 90, "bio": "", "hasStudents": false, "includesUserDataInfo": true, "canMessageUsers": false, "isActivityAccessible": false, "isModerator": false, "backgroundName": "photon-2", "canHellban": false, "isPublisher": false, "isPhantom": false, "isDataCollectible": false, "nickname": "ThinkInvisible", "canRecordTutorial": false, "canCreateOfficialClarifications": false, "publicBadges": [{"absoluteUrl": "https://www.khanacademy.org/badges/millionaire", "isRetired": false, "isOwned": false, "name": "millionairebadge", "icons": {"small": "https://cdn.kastatic.org/images/badges/sun/millionaire-40x40.png", "compact": "https://cdn.kastatic.org/images/badges/sun/millionaire-60x60.png", "large": "https://cdn.kastatic.org/images/badges/sun/millionaire-512x512.png", "email": "https://cdn.kastatic.org/images/badges/sun/millionaire-70x70.png"}, "badgeCategory": 3, "translatedDescription": "Millionaire", "safeExtendedDescription": "Earn 1,000,000 energy points", "points": 0, "translatedSafeExtendedDescription": "Earn 1,000,000 energy points", "relativeUrl": "/badges/millionaire", "iconSrc": "https://cdn.kastatic.org/images/badges/sun/millionaire-40x40.png", "hideContext": false, "slug": "millionaire", "description": "Millionaire"}, {"absoluteUrl": "https://www.khanacademy.org/badges/299792458-meters-per-second", "isRetired": false, "isOwned": false, "name": "ludicroustimedproblembadge", "icons": {"small": "https://cdn.kastatic.org/images/badges/earth/299-meters-40x40.png", "compact": "https://cdn.kastatic.org/images/badges/earth/299-meters-60x60.png", "large": "https://cdn.kastatic.org/images/badges/earth/299-meters-512x512.png", "email": "https://cdn.kastatic.org/images/badges/earth/299-meters-70x70.png"}, "badgeCategory": 2, "translatedDescription": "299,792,458 Meters per Second", "safeExtendedDescription": "Quickly & correctly answer 75 skill problems in a row (time limit depends on skill difficulty)", "points": 5000, "translatedSafeExtendedDescription": "Quickly & correctly answer 75 skill problems in a row (time limit depends on skill difficulty)", "relativeUrl": "/badges/299792458-meters-per-second", "iconSrc": "https://cdn.kastatic.org/images/badges/earth/299-meters-40x40.png", "hideContext": false, "slug": "299792458-meters-per-second", "description": "299,792,458 Meters per Second"}, {"absoluteUrl": "https://www.khanacademy.org/badges/ludicrous-streak", "isRetired": false, "isOwned": false, "name": "ludicrousstreakbadge", "icons": {"small": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-40x40.png", "compact": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-60x60.png", "large": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-512x512.png", "email": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-70x70.png"}, "badgeCategory": 1, "translatedDescription": "Ludicrous Streak", "safeExtendedDescription": "Correctly answer 100 problems in a row in a single skill", "points": 0, "translatedSafeExtendedDescription": "Correctly answer 100 problems in a row in a single skill", "relativeUrl": "/badges/ludicrous-streak", "iconSrc": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-40x40.png", "hideContext": false, "slug": "ludicrous-streak", "description": "Ludicrous Streak"}, {"absoluteUrl": "https://www.khanacademy.org/badges/advanced-js-natural-simulations", "isRetired": false, "isOwned": false, "name": "naturalsimulationsmasterybadge", "icons": {"small": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-40x40.png", "compact": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-60x60.png", "large": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-512x512.png", "email": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-70x70.png"}, "badgeCategory": 5, "translatedDescription": "Advanced JS: Natural Simulations", "safeExtendedDescription": "Complete all the 'Advanced JS: Natural Simulations' challenges.", "points": 0, "translatedSafeExtendedDescription": "Complete all the 'Advanced JS: Natural Simulations' challenges.", "relativeUrl": "/badges/advanced-js-natural-simulations", "iconSrc": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-40x40.png", "hideContext": false, "slug": "advanced-js-natural-simulations", "description": "Advanced JS: Natural Simulations"}, {"absoluteUrl": "https://www.khanacademy.org/badges/newton", "isRetired": false, "isOwned": false, "name": "newtonmasterybadge", "icons": {"small": "https://cdn.kastatic.org/images/badges/sun/newton-40x40.png", "compact": "https://cdn.kastatic.org/images/badges/sun/newton-60x60.png", "large": "https://cdn.kastatic.org/images/badges/sun/newton-512x512.png", "email": "https://cdn.kastatic.org/images/badges/sun/newton-70x70.png"}, "badgeCategory": 3, "translatedDescription": "Newton", "safeExtendedDescription": "Achieve mastery in 400 unique skills", "points": 150000, "translatedSafeExtendedDescription": "Achieve mastery in 400 unique skills", "relativeUrl": "/badges/newton", "iconSrc": "https://cdn.kastatic.org/images/badges/sun/newton-40x40.png", "hideContext": false, "slug": "newton", "description": "Newton"}], "restrictedDomain": null, "moderatorLevel": 0, "allowedByParentToAddAnyCoach": true, "avatarSrc": "https://cdn.kastatic.org/images/avatars/svg/aqualine-ultimate.svg", "userLocation": {"city": "", "country": "", "googlePlacesId": "", "state": "", "displayText": "", "lastModified": "2015-06-19T21:44:34Z", "postalCode": ""}, "points": 1034791, "avatar": {"translatedDisplayName": "Aqualine (Ultimate)", "imagePath": "/images/avatars/svg/aqualine-ultimate.svg", "displayName": "Aqualine (Ultimate)", "name": "aqualine_ultimate_style", "partType": "style", "translatedRequirements": ["Master twenty skills in math"], "forModel": "aqualine", "rewardType": "avatar_reward", "thumbnailSrc": "https://cdn.kastatic.org/images/avatars/svg/aqualine-ultimate.svg", "imageSrc": "https://cdn.kastatic.org/images/avatars/svg/aqualine-ultimate.svg", "thumbnailPath": ""}, "isCoachingLoggedInUser": false, "kaid": "kaid_494369574895113984081090"}, "discussion": {"showProjectFeedback": true, "loggedIn": false, "isDeveloper": false, "communityQuestionsTitle": "Computer Science", "showDocumentation": true, "isVideo": false, "translatedCommunityQuestionsTitle": "Computer Science", "focusId": "6353011494486016", "isOwner": false, "restrictPosting": false, "which": "scratchpad-questions", "focusKind": "scratchpad", "communityQuestionsUrl": "/computer-programming/d", "canEdit": false, "canRequestFeedback": false, "showSpinoffs": true}, "upVoted": false, "originScratchpad": {"category": "official", "deleted": false, "imageUrl": "https://www.khanacademy.org/computer-programming/contest-generative-art/6223097608929280/5649050225344512.png", "sendToPeers": false, "translatedDescription": "", "projectEval": null, "id": 6223097608929280, "url": "https://www.khanacademy.org/computer-programming/contest-generative-art/6223097608929280", "revision": {"id": 5741031244955648}, "slug": "contest-generative-art", "translatedTitle": "Contest: Generative Art"}, "flaggedByUser": false, "downVoted": false, "userScratchpad": {"kind": "UserScratchpad", "msWatched": 0, "isProject": false, "challengeStatus": -1, "lastMsWatched": 0, "msDuration": null, "fullyWatched": false, "isComplete": false, "isChallenge": false, "difficulty": -1, "points": 0, "stashedCode": "", "key": "ag5zfmtoYW4tYWNhZGVteXKuAQsSDlVzZXJTY3JhdGNocGFkIpkBYWc1emZtdG9ZVzR0WVdOaFpHVnRlWEpVQ3hJSVZYTmxja1JoZEdFaVJuVnpaWEpmYVdSZmEyVjVYMmgwZEhBNkx5OXBaQzVyYUdGdVlXTmhaR1Z0ZVM1dmNtY3ZNVFZpTlRneE1UZGxabVEzTkROaVptSTVZV1EzT0dWbE0yTTRZV0ZrTVRFTTo2MzUzMDExNDk0NDg2MDE2DA", "userKey": "ag5zfmtoYW4tYWNhZGVteXJUCxIIVXNlckRhdGEiRnVzZXJfaWRfa2V5X2h0dHA6Ly9pZC5raGFuYWNhZGVteS5vcmcvMTViNTgxMTdlZmQ3NDNiZmI5YWQ3OGVlM2M4YWFkMTEM", "id": "ag5zfmtoYW4tYWNhZGVteXJUCxIIVXNlckRhdGEiRnVzZXJfaWRfa2V5X2h0dHA6Ly9pZC5raGFuYWNhZGVteS5vcmcvMTViNTgxMTdlZmQ3NDNiZmI5YWQ3OGVlM2M4YWFkMTEM:6353011494486016", "viewed": true, "scratchpadKey": "ag5zfmtoYW4tYWNhZGVteXIXCxIKU2NyYXRjaHBhZBiAgIiL_MCkCww"}}