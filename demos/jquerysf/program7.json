{"scratchpad": {"guidelinesUrlPath": "/computer-programming/guidelines/pjs", "contentKindCode": "p", "newUrlPath": "/computer-programming/new/pjs", "hideFromHotlist": false, "spinoffCount": 1, "originScratchpadId": 6223097608929280, "originRevisionId": 5741031244955648, "projectEval": null, "height": 400, "date": "2015-06-15T14:06:09Z", "originSimilarity": 0.24951067994213258, "id": 5085736565080064, "definitelyNotSpam": false, "description": "", "category": null, "isPublished": false, "title": "Generative Art: Cellular Automata", "translatedProjectEval": null, "sendToPeers": false, "slug": "generative-art-cellular-automata", "isChallenge": false, "width": 400, "descriptionHtml": "", "youtubeId": null, "docsUrlPath": "/computer-programming/docs/pjs", "contentKind": "Scratchpad", "type": "scratchpad", "revision": {"tests": "", "code": "/***\n * AUTHOR : ThinkInvisible\n * DATE   : 6/12/2015\n * PROGRAM: Cellular Automata\n * VERSION: 1.2\n * DESCRIPTION:\n    Entry for the Generative Art contest.\n    Stylized versions of several cellular automata.\n * ABOUT ME:\n    I'm currently waiting for my second year as an electrical engineering major at a small Wisconsin college. I've always been interested in programming because a computer can do so many different things -- and something in my brain really enjoys chasing bugs around as they leave ten times as many in their wake! I've spent a lot of time writing little Javascript and C# programs just to prove a concept or to make something neat to look at for a few minutes.\n * OTHER ENTRIES:\n    Crystallizer - https://www.khanacademy.org/computer-programming/generative-art-crystallizer/4652523833131008\n    Branches     - https://www.khanacademy.org/computer-programming/generative-art-branches/6353011494486016\n * SOURCES:\n    Based on information from GoLly: http://golly.sourceforge.net/Help/Algorithms/Generations.html\n    http://stackoverflow.com/questions/22004670/is-flattening-javascript-2d-arrays-worth-any-performance-gain\n    http://stackoverflow.com/questions/1436438/how-do-you-set-clear-and-toggle-a-single-bit-in-javascript\n    http://stackoverflow.com/questions/1448943/javascript-fastest-way-of-copying-an-array-portion-into-another\n    http://stackoverflow.com/questions/2803145/is-there-0b-or-something-similar-to-represent-a-binary-number-in-javascript\n    http://stackoverflow.com/questions/17108355/cant-get-pixels-from-an-pimage-in-processing-js\n * CHANGELOG:\n    ####### 1.0 [ 6/12/2015]\n        Initial version.\n    ####### 1.1 [ 6/13/2015]\n        Performance improvements:\n            Switched array to 1D.\n            Started storing rules as binary data.\n            Switched drawing method to direct pixel array access.\n        Adjusted color scheme; colors are now randomized.\n    ####### 1.2 [ 6/15/2015]\n        Implemented performance improvements suggested by user Eric Balingit.\n        Removed several unimportant variables, comments, etc.\n        Increased default size.\n * ISSUES:\n***/\n\nthis.lerpColor = lerpColor;\n\n//Program Options//\nvar bitSet = function(num,bit){\n    return num | 1<<bit;\n};\nvar bitTest = function(num,bit){\n    return ((num>>bit) % 2 !== 0);\n};\nvar bitClear = function(num,bit){\n    return num & ~(1<<bit);\n};\nvar bitToggle = function(num,bit){\n    return bitTest(num,bit)?bitClear(num,bit):bitSet(num,bit);\n};\nvar arrToBin = function(arr) {\n    var n = 0;\n    for(var i = 0; i < arr.length; i++) {\n        if(arr[i]) {n = bitSet(n, i);}\n    }\n    return n;\n};\nvar rules =   [{b: arrToBin([0,0,1]), //birth: how many neighbors must a dead cell have to bring it to life\n                c: 0, //continue: how many neighbors must a cell have to continue living\n                g: 3,\n                n: \"Brian's Brain /2/3\"},\n               {b: arrToBin([0,0,0,1]),\n                c: arrToBin([0,0,1,1]),\n                g: 2,\n                n: \"Conway's Game of Life 2/3/2\"},\n               {b: arrToBin([0,0,1,1,0,0,1,1]),\n                c: arrToBin([0,0,0,1,1,1,0,1]),\n                g: 5,\n                n: \"Banners 2367/3457/5\"},\n               {b: arrToBin([0,0,0,1,0,1,1,1,1]),\n                c: arrToBin([0,0,1,1,0,1,0,1,1]),\n                g: 2,\n                n: \"Modified Diamoeba 35678/23578/2\"}\n                ];\nvar CScount = 10;\ncolorMode(\"HSB\");\nvar CSfade = 0.005;\nvar mainColorScheme = [ //color for each generation - only add the background color here \n    color(0,0,0,35)\n];\nvar animSpeed = 0.1; //seconds per tick\nvar maxLife = 200; //ticks until reset\nvar flashTime = 2; //seconds to white out before switching\nvar extraRules = 4; //extra slots to assign to \"random rule\"\nvar gridSize = 150; //grid will be this many cells on either side\n\n//Support/Classes//\nvar nearestPowOf2 = pow(2,ceil(log(gridSize)/log(2)));\nvar npotHeight = pow(2,ceil(log(height)/log(2)));\nvar npotWidth = pow(2,ceil(log(width)/log(2)));\nvar npaHeight = npotHeight/nearestPowOf2;\nvar npaWidth = npotWidth/nearestPowOf2;\nvar arrSize = gridSize * gridSize;\nvar blockSX = width / gridSize;\nvar blockSY = height / gridSize;\nvar resetColors = function() {\n    this.mainColorScheme = [mainColorScheme[0]];\n    this.colorMode(\"HSB\");\n    var r = floor(random(0,3));\n    var d = random()>0.5?1:-1;\n    var CS1 = color((r===0)*255,(r===1)*255,(r===2)*255,255);\n    r+=d;r=(r+3)%3;\n    var CS2 = color((r===0)*255,(r===1)*255,(r===2)*255,255);\n    for(var i = 0; i < CScount; i++) {\n        this.mainColorScheme.push(this.lerpColor(this.lerpColor(CS1,CS2,i/CScount),mainColorScheme[0],CSfade*(i+1)));\n    }\n};\nresetColors();\nvar getFutureState = function(rule, grid, p) {\n    var neighborCount = 0;\n    /*neighborCount[grid[(p+1)%arrSize]]++;\n    neighborCount[grid[(p-1+arrSize)%arrSize]]++;\n    neighborCount[grid[(p+gridSize)%arrSize]]++;\n    neighborCount[grid[(p-gridSize+arrSize)%arrSize]]++;\n    neighborCount[grid[(p+1+gridSize)%arrSize]]++;\n    neighborCount[grid[(p+1-gridSize+arrSize)%arrSize]]++;\n    neighborCount[grid[(p-1+gridSize)%arrSize]]++;\n    neighborCount[grid[(p-1-gridSize+arrSize)%arrSize]]++;*/\n    for(var i = -1; i <= 1; i++) {\n        for(var j = -1; j <= 1; j++) {\n            if(grid[(p+i+j*this.gridSize)%this.arrSize]===1){neighborCount++;}\n        }\n    }\n    if(grid[p]) {\n        var r = grid[p]+!this.bitTest(rule.c,neighborCount-1);\n        return (r>rule.g-1)?0:r;\n    } else {\n        return this.bitTest(rule.b,neighborCount)?1:0;\n    }\n};\nvar gridBuffer = Array(arrSize);\nvar advanceGrid = function(oldGrid, rule) {\n    for(var i = 0; i < arrSize; i++) {\n        this.gridBuffer[i] = this.getFutureState(rule, oldGrid, i);\n    }\n};\n\nvar drawGrid = function(grid, colorScheme) {\n    this.scale(this.width/this.gridSize,this.height/this.gridSize);\n    var g;\n    for(var i=0,x=0,y=0;i<this.arrSize; i++,x++) {\n        if(x>=this.gridSize) {x=0;y++;}\n        if((g=grid[i])===0) {continue;}\n        this.stroke(colorScheme[g]);\n        this.point(x,y);\n    }\n    this.resetMatrix();\n};\n\nvar drawGridToImage = function(grid, colorScheme, image) {\n    image.loadPixels();\n    var pix = image.pixels.toArray();\n    for(var i = 0; i < this.arrSize; i++) {\n        pix[i] = colorScheme[grid[i]];\n    }\n    image.pixels.set(pix);\n    image.updatePixels();\n};\n//very slow!\nvar drawGridToLargeImage = function(grid, colorScheme, image) {\n    image.loadPixels();\n    var pix = image.pixels.toArray();\n    var npaW=this.npaWidth,npaH=this.npaHeight,gs=this.gridSize;\n    var xa = 0, ya = 0, xm=gs*npaW, ym=gs*npaH;\n    for(var x = 0; x < xm; x += npaW) {\n        for(var y = 0; y < ym; y += npaH) {\n            for(var i = 0; i < npaW; i++) {\n                for(var j = 0; j < npaH; j++) {\n                    pix[(x+i)+(y+j)*xm] = colorScheme[grid[xa+ya*gridSize]];\n                }\n            }\n            ya++;\n        }\n        xa++;\n        ya = 0;\n    }\n    image.pixels.set(pix);\n    image.updatePixels();\n};\nvar mainCanvas = createGraphics(gridSize*npaWidth,gridSize*npaHeight,P2D);\n//Main Program//\nvar CAGrid, mainRule;\nvar resetGrid = function() {\n    var r = this.floor(this.random()*(this.rules.length+this.extraRules));\n    if(r >= this.rules.length) {\n        var mrb = 0, mrc = 0;\n        for(var i = 0; i < 9; i++) {\n            if(this.random(0,1)>0.5) {mrb = this.bitSet(mrb,i);}\n            if(this.random(0,1)>0.5) {mrc = this.bitSet(mrc,i);}\n        }\n        var mrg = this.floor(this.random(2,this.mainColorScheme.length));\n        var mrn = \"Random Rule \";\n        for(var i = 0; i < 9; i++) {if(this.bitTest(mrb,i)) {mrn += i;}}\n        mrn += \"/\";\n        for(var i = 0; i < 9; i++) {if(this.bitTest(mrc,i)) {mrn += i;}}\n        mrn += \"/\" + mrg;\n        this.mainRule = {\n            b: mrb,\n            c: mrc,\n            g: mrg,\n            n: mrn\n        };\n    } else {this.mainRule = this.rules[r];}\n    this.CAGrid = [];\n    for(var i = 0; i < this.arrSize; i++) {\n        this.CAGrid[i] = this.random()<0.2?1:0;\n    }\n};\nresetGrid();\n\nvar lastFrame, SPF;\nvar thisFrame = millis(), tAccum = 0, age = 0;\nbackground(0,0,0);\nnoStroke();\n//hint(DISABLE_OPENGL_2X_SMOOTH); these absolutely do not work in KA's processingjs, only standard processing or an opengl context; limitation of HTML5 canvas\n//noSmooth();\ntextAlign(CENTER);\nimageMode(CENTER);\ntextFont(createFont(\"monospace\"), 16);\nvar draw = function() {\n    if(!this.loadPixels || !this.mainCanvas){return;}\n    this.lastFrame = this.thisFrame;\n    this.thisFrame = this.millis();\n    this.SPF = (this.thisFrame - this.lastFrame)/1000;\n    this.tAccum += this.SPF;\n    if(this.tAccum > this.animSpeed*3) {this.tAccum = this.animSpeed*3;}\n    this.noStroke();\n    while(this.tAccum > this.animSpeed) {\n        this.tAccum -= this.animSpeed;\n        this.age++;\n        \n        this.advanceGrid(this.CAGrid, this.mainRule);\n        this.CAGrid = this.gridBuffer.slice();\n        \n        var timeRemaining = (this.maxLife - this.age) * this.animSpeed;\n        var a = 255 * this.pow(this.max(this.flashTime-timeRemaining,0)/this.flashTime,3);\n        timeRemaining = this.floor(timeRemaining);\n        this.fill(this.mainColorScheme[0]);\n        this.rect(0,0,this.width,this.height);\n        \n        //drawGrid(CAGrid, mainColorScheme);\n        this.drawGridToLargeImage(this.CAGrid, this.mainColorScheme, this.mainCanvas);\n        this.image(this.mainCanvas,this.width/2,this.height/2,this.width,this.height);\n        \n        this.fill(125,125,255,125);\n        this.rect(0,0,this.width*this.age/this.maxLife,8);\n        this.fill(0, 0, 0);\n        var t = this.mainRule.n.toUpperCase();\n        var u = (timeRemaining < 10 ? \"00\" : (timeRemaining < 100 ? \"0\" : \"\")) + timeRemaining;\n        for(var i = -1; i < 1; i++) {for(var j = -1; j < 1; j++) {\n            this.text(t, this.width/2+i,this.height-3+j);\n            this.text(u, this.width/2+i,13+j);\n        }}\n        this.fill(a,a,a,a);\n        this.rect(0,0,this.width,this.height);\n        this.fill(255, 255, 255);\n        this.text(t, this.width/2,this.height-3);\n        this.text(u, this.width/2,13);\n    }\n    if(this.age > this.maxLife) {\n        this.age = 0;\n        this.resetColors();\n        this.resetGrid();\n    }\n};\n", "created": "2015-06-15T14:06:09Z", "folds": [], "translatedMp3Url": "", "hasAudio": false, "mp3Url": "", "editorType": "ace_pjs", "playback": "", "youtubeId": null, "configVersion": 4, "id": 5673385510043648}, "tests": "", "imagePath": "/computer-programming/generative-art-cellular-automata/5085736565080064/5673385510043648.png", "nodeType": "scratchpad", "editSlug": "edit/p/generative-art-cellular-automata", "isProject": false, "tags": [], "translatedDescription": "", "byChild": false, "difficulty": -1, "translatedTests": "", "key": "ag5zfmtoYW4tYWNhZGVteXIXCxIKU2NyYXRjaHBhZBiAgIiLta6ECQw", "canvasOnly": false, "nodeSlug": "p/generative-art-cellular-automata", "kind": "Scratchpad", "termMap": {"new": "New Program", "guidelines": "Program Guidelines", "restart": "Restart"}, "globalId": "p5085736565080064", "translatedDescriptionHtml": "", "created": "2015-06-12T19:46:14Z", "url": "https://www.khanacademy.org/computer-programming/generative-art-cellular-automata/5085736565080064", "imageUrl": "https://www.khanacademy.org/computer-programming/generative-art-cellular-automata/5085736565080064/5673385510043648.png", "originIsProject": false, "sumVotesIncremented": 2, "defaultUrlPath": null, "flags": [], "relativeUrl": "/computer-programming/generative-art-cellular-automata/5085736565080064", "isProjectOrFork": false, "userAuthoredContentType": "pjs", "kaid": "kaid_494369574895113984081090", "translatedTitle": "Generative Art: Cellular Automata"}, "embedded": false, "creatorProfile": {"isSelf": false, "username": "ThinkInvisible", "isParentOfLoggedInUser": false, "background": {"translatedDisplayName": "Photon Two", "imagePath": "/images/profile/backgrounds/bg-photon-2.jpg", "displayName": "Photon Two", "name": "photon-2", "thumbSrc": "https://cdn.kastatic.org/images/profile/backgrounds/bg-photon-2-preview.png", "translatedRequirements": ["Earn 100,000 energy points"], "rewardType": "profile_background", "thumbnailSrc": "https://cdn.kastatic.org/images/profile/backgrounds/bg-photon-2.jpg", "imageSrc": "https://cdn.kastatic.org/images/profile/backgrounds/bg-photon-2.jpg", "thumbPath": "/images/profile/backgrounds/bg-photon-2-preview.png", "thumbnailPath": ""}, "hasChangedAvatar": true, "soundOn": false, "followRequiresApproval": true, "canModifyCoaches": true, "dateJoined": "2013-12-17T16:56:48Z", "backgroundSrc": "https://cdn.kastatic.org/images/profile/backgrounds/bg-photon-2.jpg", "isChildAccount": false, "isCreator": false, "childPageRoot": "/parent/child/ThinkInvisible/", "isCurator": false, "isDeveloper": false, "isCoachingLoggedInUser": false, "avatarName": "aqualine_ultimate_style", "affiliations": [], "isModerator": false, "canEvalCsProjects": true, "globalPermissions": [], "profileRoot": "/profile/ThinkInvisible/", "email": "", "countVideosCompleted": 90, "bio": "", "hasStudents": false, "countBrandNewNotifications": 0, "isActivityAccessible": false, "isOrphan": false, "isPublic": true, "canHellban": false, "isPhantom": false, "backgroundName": "photon-2", "isDataCollectible": false, "nickname": "ThinkInvisible", "canMessageUsers": false, "canCreateOfficialClarifications": false, "publicBadges": [{"absoluteUrl": "https://www.khanacademy.org/badges/millionaire", "isRetired": false, "isOwned": false, "translatedSafeExtendedDescription": "Earn 1,000,000 energy points", "icons": {"large": "https://cdn.kastatic.org/images/badges/sun/millionaire-512x512.png", "compact": "https://cdn.kastatic.org/images/badges/sun/millionaire-60x60.png", "small": "https://cdn.kastatic.org/images/badges/sun/millionaire-40x40.png", "email": "https://cdn.kastatic.org/images/badges/sun/millionaire-70x70.png"}, "relativeUrl": "/badges/millionaire", "description": "Millionaire", "translatedDescription": "Millionaire", "badgeCategory": 3, "safeExtendedDescription": "Earn 1,000,000 energy points", "points": 0, "iconSrc": "https://cdn.kastatic.org/images/badges/sun/millionaire-40x40.png", "hideContext": false, "slug": "millionaire", "name": "millionairebadge"}, {"absoluteUrl": "https://www.khanacademy.org/badges/299792458-meters-per-second", "isRetired": false, "isOwned": false, "translatedSafeExtendedDescription": "Quickly & correctly answer 75 skill problems in a row (time limit depends on skill difficulty)", "icons": {"large": "https://cdn.kastatic.org/images/badges/earth/299-meters-512x512.png", "compact": "https://cdn.kastatic.org/images/badges/earth/299-meters-60x60.png", "small": "https://cdn.kastatic.org/images/badges/earth/299-meters-40x40.png", "email": "https://cdn.kastatic.org/images/badges/earth/299-meters-70x70.png"}, "relativeUrl": "/badges/299792458-meters-per-second", "description": "299,792,458 Meters per Second", "translatedDescription": "299,792,458 Meters per Second", "badgeCategory": 2, "safeExtendedDescription": "Quickly & correctly answer 75 skill problems in a row (time limit depends on skill difficulty)", "points": 5000, "iconSrc": "https://cdn.kastatic.org/images/badges/earth/299-meters-40x40.png", "hideContext": false, "slug": "299792458-meters-per-second", "name": "ludicroustimedproblembadge"}, {"absoluteUrl": "https://www.khanacademy.org/badges/ludicrous-streak", "isRetired": false, "isOwned": false, "translatedSafeExtendedDescription": "Correctly answer 100 problems in a row in a single skill", "icons": {"large": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-512x512.png", "compact": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-60x60.png", "small": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-40x40.png", "email": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-70x70.png"}, "relativeUrl": "/badges/ludicrous-streak", "description": "Ludicrous Streak", "translatedDescription": "Ludicrous Streak", "badgeCategory": 1, "safeExtendedDescription": "Correctly answer 100 problems in a row in a single skill", "points": 0, "iconSrc": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-40x40.png", "hideContext": false, "slug": "ludicrous-streak", "name": "ludicrousstreakbadge"}, {"absoluteUrl": "https://www.khanacademy.org/badges/advanced-js-natural-simulations", "isRetired": false, "isOwned": false, "translatedSafeExtendedDescription": "Complete all the 'Advanced JS: Natural Simulations' challenges.", "icons": {"large": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-512x512.png", "compact": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-60x60.png", "small": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-40x40.png", "email": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-70x70.png"}, "relativeUrl": "/badges/advanced-js-natural-simulations", "description": "Advanced JS: Natural Simulations", "translatedDescription": "Advanced JS: Natural Simulations", "badgeCategory": 5, "safeExtendedDescription": "Complete all the 'Advanced JS: Natural Simulations' challenges.", "points": 0, "iconSrc": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-40x40.png", "hideContext": false, "slug": "advanced-js-natural-simulations", "name": "naturalsimulationsmasterybadge"}, {"absoluteUrl": "https://www.khanacademy.org/badges/newton", "isRetired": false, "isOwned": false, "translatedSafeExtendedDescription": "Achieve mastery in 400 unique skills", "icons": {"large": "https://cdn.kastatic.org/images/badges/sun/newton-512x512.png", "compact": "https://cdn.kastatic.org/images/badges/sun/newton-60x60.png", "small": "https://cdn.kastatic.org/images/badges/sun/newton-40x40.png", "email": "https://cdn.kastatic.org/images/badges/sun/newton-70x70.png"}, "relativeUrl": "/badges/newton", "description": "Newton", "translatedDescription": "Newton", "badgeCategory": 3, "safeExtendedDescription": "Achieve mastery in 400 unique skills", "points": 150000, "iconSrc": "https://cdn.kastatic.org/images/badges/sun/newton-40x40.png", "hideContext": false, "slug": "newton", "name": "newtonmasterybadge"}], "moderatorLevel": 0, "restrictedDomain": null, "allowedByParentToAddAnyCoach": true, "avatarSrc": "https://cdn.kastatic.org/images/avatars/svg/aqualine-ultimate.svg", "kaid": "kaid_494369574895113984081090", "userLocation": {"city": "", "country": "", "googlePlacesId": "", "state": "", "displayText": "", "lastModified": "2015-06-19T21:44:34Z", "postalCode": ""}, "canRecordTutorial": false, "points": 1034791, "avatar": {"translatedDisplayName": "Aqualine (Ultimate)", "imagePath": "/images/avatars/svg/aqualine-ultimate.svg", "displayName": "Aqualine (Ultimate)", "name": "aqualine_ultimate_style", "partType": "style", "forModel": "aqualine", "translatedRequirements": ["Master twenty skills in math"], "rewardType": "avatar_reward", "thumbnailSrc": "https://cdn.kastatic.org/images/avatars/svg/aqualine-ultimate.svg", "imageSrc": "https://cdn.kastatic.org/images/avatars/svg/aqualine-ultimate.svg", "thumbnailPath": ""}, "includesUserDataInfo": true, "isPublisher": false}, "discussion": {"showProjectFeedback": true, "loggedIn": false, "isDeveloper": false, "communityQuestionsTitle": "Computer Science", "isVideo": false, "translatedCommunityQuestionsTitle": "Computer Science", "focusId": "5085736565080064", "isOwner": false, "restrictPosting": false, "which": "scratchpad-questions", "focusKind": "scratchpad", "canRequestFeedback": false, "communityQuestionsUrl": "/computer-programming/d", "canEdit": false, "showDocumentation": true, "showSpinoffs": true}, "upVoted": false, "originScratchpad": {"category": "official", "deleted": false, "imageUrl": "https://www.khanacademy.org/computer-programming/contest-generative-art/6223097608929280/5649050225344512.png", "sendToPeers": false, "translatedDescription": "", "projectEval": null, "slug": "contest-generative-art", "url": "https://www.khanacademy.org/computer-programming/contest-generative-art/6223097608929280", "revision": {"id": 5741031244955648}, "id": 6223097608929280, "translatedTitle": "Contest: Generative Art"}, "flaggedByUser": false, "downVoted": false, "userScratchpad": {"kind": "UserScratchpad", "msWatched": 0, "msDuration": null, "isProject": false, "lastMsWatched": 0, "challengeStatus": -1, "scratchpadKey": "ag5zfmtoYW4tYWNhZGVteXIXCxIKU2NyYXRjaHBhZBiAgIiLta6ECQw", "fullyWatched": false, "isComplete": false, "isChallenge": false, "difficulty": -1, "points": 0, "stashedCode": "", "key": "ag5zfmtoYW4tYWNhZGVteXKuAQsSDlVzZXJTY3JhdGNocGFkIpkBYWc1emZtdG9ZVzR0WVdOaFpHVnRlWEpVQ3hJSVZYTmxja1JoZEdFaVJuVnpaWEpmYVdSZmEyVjVYMmgwZEhBNkx5OXBaQzVyYUdGdVlXTmhaR1Z0ZVM1dmNtY3ZPVFZtWmpVMk9ETmpNREE1TkdRek1UazVNR1k0T0RRelpUSXlaakV5TnpJTTo1MDg1NzM2NTY1MDgwMDY0DA", "userKey": "ag5zfmtoYW4tYWNhZGVteXJUCxIIVXNlckRhdGEiRnVzZXJfaWRfa2V5X2h0dHA6Ly9pZC5raGFuYWNhZGVteS5vcmcvOTVmZjU2ODNjMDA5NGQzMTk5MGY4ODQzZTIyZjEyNzIM", "id": "ag5zfmtoYW4tYWNhZGVteXJUCxIIVXNlckRhdGEiRnVzZXJfaWRfa2V5X2h0dHA6Ly9pZC5raGFuYWNhZGVteS5vcmcvOTVmZjU2ODNjMDA5NGQzMTk5MGY4ODQzZTIyZjEyNzIM:5085736565080064", "viewed": true}}