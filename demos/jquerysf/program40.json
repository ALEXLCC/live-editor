{"scratchpad": {"guidelinesUrlPath": "/computer-programming/guidelines/pjs", "contentKindCode": "p", "newUrlPath": "/computer-programming/new/pjs", "hideFromHotlist": false, "spinoffCount": 0, "originScratchpadId": 6223097608929280, "originRevisionId": 5668600916475904, "projectEval": null, "height": 400, "date": "2015-06-13T02:11:32Z", "originSimilarity": 0.26093443998880911, "id": 4652523833131008, "definitelyNotSpam": false, "description": "", "category": null, "isPublished": false, "title": "Generative Art: Crystallizer", "translatedProjectEval": null, "sendToPeers": false, "slug": "generative-art-crystallizer", "isChallenge": false, "width": 400, "descriptionHtml": "", "youtubeId": null, "docsUrlPath": "/computer-programming/docs/pjs", "contentKind": "Scratchpad", "type": "scratchpad", "revision": {"tests": "", "code": "/***\n * AUTHOR : ThinkInvisible\n * DATE   : 6/10/2015\n * PROGRAM: Crystallizer\n * VERSION: 1.1\n * DESCRIPTION:\n    Entry for the Generative Art contest.\n    Generates a bunch of unevenly distributed beveled rectangles, simulating a light source from the top left corner in a way that makes the rectangles look crystalline.\n * ABOUT ME:\n    I'm currently waiting for my second year as an electrical engineering major at a small Wisconsin college. I've always been interested in programming because a computer can do so many different things -- and something in my brain really enjoys chasing bugs around as they leave ten times as many in their wake! I've spent a lot of time writing little Javascript and C# programs just to prove a concept or to make something neat to look at for a few minutes.\n * OTHER ENTRIES:\n    Branches          - https://www.khanacademy.org/computer-programming/generative-art-branches/6353011494486016\n    Cellular Automata - https://www.khanacademy.org/computer-programming/generative-art-cellular-automata/5085736565080064\n * SOURCES:\n    Based on my BSP library, originally at https://www.khanacademy.org/computer-programming/binary-space-partitioning/6569935257468928\n * CHANGELOG:\n    ####### 1.0 [ 6/10/2015]\n        Initial version.\n    ####### 1.1 [ 6/11/2015]\n        Adjusted slow mode.\n        Fixed slow rendering caused by drawing the entire tree every frame.\n    ####### 1.2 [ 6/12/2015]\n        Cleaned and commented.\n * ISSUES:\n    Output is slightly unpredictable; the program may need to be reset a few times to get a good result.\n***/\n\n//PROGRAM OPTIONS//\nvar basesize = 2;       //In general, controls the size of the drawing. Must be greater than or equal to 1; recommended values are 2 through 4.\nvar csmodifier = 3.5;   //Affects how drastic color changes are. Recommended value is 3 for basesize of 3 or 4, and 3.5 for basesize of 2.\nvar slowmode = true;    //If false, all leaves will be split every frame. If true, exactly [slowmospeed] leaves will be split every frame. Recommended value is true.\nvar slowmospeed = 250;  //Number of squares to create every frame if slowmode is enabled. Ideal value depends on your computer speed.\nvar autoreset = true;   //If true, another wall will be drawn 10 seconds after the previous wall has completed.\nvar arDebug = true;     //If true, a popup will be displayed showing how many splits and iterations the current wall took and a countdown to the next wall.\n\n//VARIABLES//\nvar colorScale = basesize/csmodifier;   //Adjusts csmodifier based on size so the color range stays more stable over all values of basesize.\nvar gen_MinSize = basesize;             //Leaves below this size cannot be split.\nvar gen_MaxSize = basesize * 4;         //Leaves above this size must be split.\nvar gen_WHBias = 0.29;                   //The maximum aspect ratio and maximum inverse aspect ratio of a leaf, after which the program will force it to split along its short axis.\nvar gen_SplitBias = 0.11;               //Chance to avoid randomly splitting a leaf if it isn't larger than maxSize.\n\n//SUPPORT FUNCTIONS//\n//Returns a random integer between min and max, inclusive.\nvar randInt = function(min, max) {\n    return floor(random() * (max - min + 1)) + min;\n};\n\n//Creates a new Leaf with a certain position and size and no children.\nvar Leaf = function(position, size) {\n    this.position = position;\n    this.size = size;\n    this.leftChild = null;\n    this.rightChild = null;\n};\n\n//Applies a function to a leaf, the leaf's children, the leaf's childrens' children,  etc. in the reverse of that order.\nLeaf.prototype.applyFunctionDepthFirst = function(func) {\n    if(this.leftChild !== null) {\n        this.leftChild.applyFunctionDepthFirst(func);\n    }\n    if(this.rightChild !== null) {\n        this.rightChild.applyFunctionDepthFirst(func);\n    }\n    func.call(this);\n};\n\n//Applies a function to a leaf, the leaf's children, the leaf's childrens' children,  etc. in that order.\nLeaf.prototype.applyFunctionBreadthFirst = function(func) {\n    func.call(this);\n    if(this.leftChild !== null) {\n        this.leftChild.applyFunctionBreadthFirst(func);\n    }\n    if(this.rightChild !== null) {\n        this.rightChild.applyFunctionBreadthFirst(func);\n    }\n};\n\n//Generates a leaf's children based on system variables. Returns true on success and false on failure.\nLeaf.prototype.Split = function() {\n    if(this.leftChild !== null || this.rightChild !== null) {return false;} //This leaf already has children; we can't create more!\n    \n    //Choose a direction to split in; determine whether to override this if the aspect ratio is too high or too low, or if splitting in the randomly chosen direction would make the leaf too small.\n    var splitH = random() > 0.5;\n    var max = (splitH ? this.size.y : this.size.x) - gen_MinSize;\n    if(max <= gen_MinSize) {splitH = !splitH;}\n    if(this.size.x > this.size.y && this.size.y / this.size.x >= gen_WHBias) {splitH = false;}\n    if(this.size.y > this.size.x && this.size.x / this.size.y >= gen_WHBias) {splitH = true;}\n    \n    //If this split would still cause the leaf to fall below the minimum size, abort.\n    max = (splitH ? this.size.y : this.size.x) - gen_MinSize;\n    if(max <= gen_MinSize) {return false;}\n    \n    //Choose a position along the chosen axis to split; position/size children based on this line and the position/size of the current leaf.\n    var splitN = randInt(gen_MinSize, max);\n    if(splitH) {\n        this.leftChild = new Leaf(\n            this.position,\n            new PVector(this.size.x, splitN)\n        );\n        this.rightChild = new Leaf(\n            new PVector(this.position.x, this.position.y + splitN),\n            new PVector(this.size.x, this.size.y - splitN)\n        );\n    } else {\n        this.leftChild = new Leaf(\n            this.position,\n            new PVector(splitN, this.size.y)\n        );\n        this.rightChild = new Leaf(\n            new PVector(this.position.x + splitN, this.position.y),\n            new PVector(this.size.x - splitN, this.size.y)\n        );\n    }\n    \n    //Keep track of depth of recursion.\n    this.leftChild.iteration = this.iteration + 1;\n    this.rightChild.iteration = this.iteration + 1;\n    this.leftChild.scrollscore = this.scrollscore - 1;\n    this.rightChild.scrollscore = this.scrollscore + 1;\n    return true;\n};\n\n//MAIN PROGRAM//\ncolorMode(HSB);\nvar drawLeaf = function() {\n    fill((this.iteration*10*colorScale)%255,constrain(this.scrollscore*25*colorScale+125,0,255),255);\n    rect(this.position.x, this.position.y, this.size.x, this.size.y);\n};\n\nvar tree;                //Stores the current tree.\nvar gen_Iterations = 0;  //Number of iterations since the current tree was created.\nvar gen_Splits = 0;      //Number of times the current tree has been split successfully.\nvar gen_Running = false; //True if the generation loop is expected to be running.\nvar gen_Active = false;  //True while the generation loop is actually running.\nvar LastGen = millis();  //Stores the last time that generation ended.\n\n//Handles variable updates for genLoop.\nvar genFinalize = function() {\n    gen_Running = false;\n    LastGen = millis();\n};\n//Here's the main program itself!\nvar genLoop = function(numTicks) {\n    var remTicks = numTicks; //Buffer for number of ticks remaining.\n    gen_Active = true; //Set the activity flag so nothing else messes with our data or tries to start another loop.\n    gen_Iterations++;\n    \n    var didSplit = false;\n    tree.applyFunctionDepthFirst(function() {\n       if(didSplit && slowmode && remTicks === 0){ //If we're out of iterations, give control back to whatever called us.\n           return;\n       }\n       //Handles the actual split operation as well as rendering.\n       if(this.size.x > gen_MaxSize || this.size.y > gen_MaxSize || random() > gen_SplitBias) {\n           if(this.Split(gen_MinSize)) {\n               drawLeaf.call(this.leftChild);\n               drawLeaf.call(this.rightChild);\n               didSplit = true;\n               gen_Splits ++;\n               remTicks --; //Iterations are actually only drained on successful splits, not failed ones; be careful with extremely small minimum sizes/extremely large initial sizes!\n           }\n       }\n    });\n    \n    //Finish up; don't tell the program we're done generating if there are still splits possible.\n    gen_Active = false;\n    if(!didSplit){\n        genFinalize();\n    }\n};\n\n//Creates the initial tree.\nvar genInit = function() {\n    tree = new Leaf(new PVector(0, 0), new PVector(width, height));\n    tree.iteration = 0;\n    tree.scrollscore = 0;\n    gen_Iterations = 0;\n    gen_Splits = 0;\n    gen_Running = true;\n};\n\n//Handles the start/stop logic; PJS boilerplate.\nvar draw = function() {\n    if(gen_Running && !gen_Active) {\n        noStroke();\n        genLoop(slowmospeed);\n    } else if(!gen_Running && autoreset) {\n        if(millis() - LastGen > 10000) {\n            background(0,0,0);\n            genInit();\n        } else if(arDebug) {\n            stroke(0, 255, 255);\n            fill(0, 0, 45);\n            rect(3, 3, width - 6, 16);\n            fill(255);\n            text(\"finished with \" + gen_Splits + \" splits over \" + gen_Iterations + \" iteration(s)    restarting in \" + ceil(10 - (millis() - LastGen)/1000), 4, 14);\n        }\n    }\n};\n\n//Engage!\ngenInit();", "created": "2015-06-13T02:11:32Z", "folds": [], "translatedMp3Url": "", "hasAudio": false, "mp3Url": "", "editorType": "ace_pjs", "playback": "", "youtubeId": null, "configVersion": 4, "id": 5634387206995968}, "tests": "", "imagePath": "/computer-programming/generative-art-crystallizer/4652523833131008/5634387206995968.png", "nodeType": "scratchpad", "editSlug": "edit/p/generative-art-crystallizer", "isProject": false, "tags": [], "translatedDescription": "", "byChild": false, "difficulty": -1, "translatedTests": "", "key": "ag5zfmtoYW4tYWNhZGVteXIXCxIKU2NyYXRjaHBhZBiAgIjzoe6hCAw", "canvasOnly": false, "nodeSlug": "p/generative-art-crystallizer", "kind": "Scratchpad", "termMap": {"new": "New Program", "guidelines": "Program Guidelines", "restart": "Restart"}, "globalId": "p4652523833131008", "translatedDescriptionHtml": "", "created": "2015-06-11T01:27:45Z", "url": "https://www.khanacademy.org/computer-programming/generative-art-crystallizer/4652523833131008", "imageUrl": "https://www.khanacademy.org/computer-programming/generative-art-crystallizer/4652523833131008/5634387206995968.png", "originIsProject": false, "sumVotesIncremented": 2, "defaultUrlPath": null, "flags": [], "relativeUrl": "/computer-programming/generative-art-crystallizer/4652523833131008", "isProjectOrFork": false, "userAuthoredContentType": "pjs", "kaid": "kaid_494369574895113984081090", "translatedTitle": "Generative Art: Crystallizer"}, "embedded": false, "creatorProfile": {"isSelf": false, "username": "ThinkInvisible", "isParentOfLoggedInUser": false, "isPhantom": false, "hasChangedAvatar": true, "soundOn": false, "followRequiresApproval": true, "canModifyCoaches": true, "dateJoined": "2013-12-17T16:56:48Z", "hasStudents": false, "backgroundSrc": "https://cdn.kastatic.org/images/profile/backgrounds/bg-photon-2.jpg", "isChildAccount": false, "isCreator": false, "childPageRoot": "/parent/child/ThinkInvisible/", "isCurator": false, "isDeveloper": false, "isCoachingLoggedInUser": false, "avatarName": "aqualine_ultimate_style", "affiliations": [], "isModerator": false, "canEvalCsProjects": true, "globalPermissions": [], "profileRoot": "/profile/ThinkInvisible/", "email": "", "countVideosCompleted": 90, "bio": "", "isPublic": true, "countBrandNewNotifications": 0, "isActivityAccessible": false, "isOrphan": false, "backgroundName": "photon-2", "canHellban": false, "background": {"translatedDisplayName": "Photon Two", "imagePath": "/images/profile/backgrounds/bg-photon-2.jpg", "displayName": "Photon Two", "name": "photon-2", "thumbSrc": "https://cdn.kastatic.org/images/profile/backgrounds/bg-photon-2-preview.png", "translatedRequirements": ["Earn 100,000 energy points"], "rewardType": "profile_background", "thumbnailSrc": "https://cdn.kastatic.org/images/profile/backgrounds/bg-photon-2.jpg", "imageSrc": "https://cdn.kastatic.org/images/profile/backgrounds/bg-photon-2.jpg", "thumbPath": "/images/profile/backgrounds/bg-photon-2-preview.png", "thumbnailPath": ""}, "isDataCollectible": false, "nickname": "ThinkInvisible", "canMessageUsers": false, "canCreateOfficialClarifications": false, "publicBadges": [{"absoluteUrl": "https://www.khanacademy.org/badges/millionaire", "isRetired": false, "isOwned": false, "translatedSafeExtendedDescription": "Earn 1,000,000 energy points", "icons": {"large": "https://cdn.kastatic.org/images/badges/sun/millionaire-512x512.png", "compact": "https://cdn.kastatic.org/images/badges/sun/millionaire-60x60.png", "small": "https://cdn.kastatic.org/images/badges/sun/millionaire-40x40.png", "email": "https://cdn.kastatic.org/images/badges/sun/millionaire-70x70.png"}, "relativeUrl": "/badges/millionaire", "description": "Millionaire", "translatedDescription": "Millionaire", "badgeCategory": 3, "safeExtendedDescription": "Earn 1,000,000 energy points", "points": 0, "iconSrc": "https://cdn.kastatic.org/images/badges/sun/millionaire-40x40.png", "hideContext": false, "slug": "millionaire", "name": "millionairebadge"}, {"absoluteUrl": "https://www.khanacademy.org/badges/299792458-meters-per-second", "isRetired": false, "isOwned": false, "translatedSafeExtendedDescription": "Quickly & correctly answer 75 skill problems in a row (time limit depends on skill difficulty)", "icons": {"large": "https://cdn.kastatic.org/images/badges/earth/299-meters-512x512.png", "compact": "https://cdn.kastatic.org/images/badges/earth/299-meters-60x60.png", "small": "https://cdn.kastatic.org/images/badges/earth/299-meters-40x40.png", "email": "https://cdn.kastatic.org/images/badges/earth/299-meters-70x70.png"}, "relativeUrl": "/badges/299792458-meters-per-second", "description": "299,792,458 Meters per Second", "translatedDescription": "299,792,458 Meters per Second", "badgeCategory": 2, "safeExtendedDescription": "Quickly & correctly answer 75 skill problems in a row (time limit depends on skill difficulty)", "points": 5000, "iconSrc": "https://cdn.kastatic.org/images/badges/earth/299-meters-40x40.png", "hideContext": false, "slug": "299792458-meters-per-second", "name": "ludicroustimedproblembadge"}, {"absoluteUrl": "https://www.khanacademy.org/badges/ludicrous-streak", "isRetired": false, "isOwned": false, "translatedSafeExtendedDescription": "Correctly answer 100 problems in a row in a single skill", "icons": {"large": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-512x512.png", "compact": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-60x60.png", "small": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-40x40.png", "email": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-70x70.png"}, "relativeUrl": "/badges/ludicrous-streak", "description": "Ludicrous Streak", "translatedDescription": "Ludicrous Streak", "badgeCategory": 1, "safeExtendedDescription": "Correctly answer 100 problems in a row in a single skill", "points": 0, "iconSrc": "https://cdn.kastatic.org/images/badges/moon/ludicrous-streak-40x40.png", "hideContext": false, "slug": "ludicrous-streak", "name": "ludicrousstreakbadge"}, {"absoluteUrl": "https://www.khanacademy.org/badges/advanced-js-natural-simulations", "isRetired": false, "isOwned": false, "translatedSafeExtendedDescription": "Complete all the 'Advanced JS: Natural Simulations' challenges.", "icons": {"large": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-512x512.png", "compact": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-60x60.png", "small": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-40x40.png", "email": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-70x70.png"}, "relativeUrl": "/badges/advanced-js-natural-simulations", "description": "Advanced JS: Natural Simulations", "translatedDescription": "Advanced JS: Natural Simulations", "badgeCategory": 5, "safeExtendedDescription": "Complete all the 'Advanced JS: Natural Simulations' challenges.", "points": 0, "iconSrc": "https://cdn.kastatic.org/images/badges/cs/natural_simulations_mastery_badge-40x40.png", "hideContext": false, "slug": "advanced-js-natural-simulations", "name": "naturalsimulationsmasterybadge"}, {"absoluteUrl": "https://www.khanacademy.org/badges/newton", "isRetired": false, "isOwned": false, "translatedSafeExtendedDescription": "Achieve mastery in 400 unique skills", "icons": {"large": "https://cdn.kastatic.org/images/badges/sun/newton-512x512.png", "compact": "https://cdn.kastatic.org/images/badges/sun/newton-60x60.png", "small": "https://cdn.kastatic.org/images/badges/sun/newton-40x40.png", "email": "https://cdn.kastatic.org/images/badges/sun/newton-70x70.png"}, "relativeUrl": "/badges/newton", "description": "Newton", "translatedDescription": "Newton", "badgeCategory": 3, "safeExtendedDescription": "Achieve mastery in 400 unique skills", "points": 150000, "iconSrc": "https://cdn.kastatic.org/images/badges/sun/newton-40x40.png", "hideContext": false, "slug": "newton", "name": "newtonmasterybadge"}], "moderatorLevel": 0, "restrictedDomain": null, "allowedByParentToAddAnyCoach": true, "avatarSrc": "https://cdn.kastatic.org/images/avatars/svg/aqualine-ultimate.svg", "kaid": "kaid_494369574895113984081090", "userLocation": {"city": "", "country": "", "googlePlacesId": "", "state": "", "displayText": "", "lastModified": "2015-06-19T21:44:34Z", "postalCode": ""}, "canRecordTutorial": false, "points": 1034791, "avatar": {"translatedDisplayName": "Aqualine (Ultimate)", "imagePath": "/images/avatars/svg/aqualine-ultimate.svg", "displayName": "Aqualine (Ultimate)", "name": "aqualine_ultimate_style", "partType": "style", "forModel": "aqualine", "translatedRequirements": ["Master twenty skills in math"], "rewardType": "avatar_reward", "thumbnailSrc": "https://cdn.kastatic.org/images/avatars/svg/aqualine-ultimate.svg", "imageSrc": "https://cdn.kastatic.org/images/avatars/svg/aqualine-ultimate.svg", "thumbnailPath": ""}, "includesUserDataInfo": true, "isPublisher": false}, "discussion": {"showProjectFeedback": true, "loggedIn": false, "isDeveloper": false, "communityQuestionsTitle": "Computer Science", "isVideo": false, "translatedCommunityQuestionsTitle": "Computer Science", "focusId": "4652523833131008", "isOwner": false, "restrictPosting": false, "which": "scratchpad-questions", "focusKind": "scratchpad", "canRequestFeedback": false, "communityQuestionsUrl": "/computer-programming/d", "canEdit": false, "showDocumentation": true, "showSpinoffs": true}, "upVoted": false, "originScratchpad": {"category": "official", "deleted": false, "imageUrl": "https://www.khanacademy.org/computer-programming/contest-generative-art/6223097608929280/5649050225344512.png", "sendToPeers": false, "translatedDescription": "", "projectEval": null, "slug": "contest-generative-art", "url": "https://www.khanacademy.org/computer-programming/contest-generative-art/6223097608929280", "revision": {"id": 5668600916475904}, "id": 6223097608929280, "translatedTitle": "Contest: Generative Art"}, "flaggedByUser": false, "downVoted": false, "userScratchpad": {"kind": "UserScratchpad", "msWatched": 0, "msDuration": null, "isProject": false, "lastMsWatched": 0, "challengeStatus": -1, "scratchpadKey": "ag5zfmtoYW4tYWNhZGVteXIXCxIKU2NyYXRjaHBhZBiAgIjzoe6hCAw", "fullyWatched": false, "isComplete": false, "isChallenge": false, "difficulty": -1, "points": 0, "stashedCode": "", "key": "ag5zfmtoYW4tYWNhZGVteXKuAQsSDlVzZXJTY3JhdGNocGFkIpkBYWc1emZtdG9ZVzR0WVdOaFpHVnRlWEpVQ3hJSVZYTmxja1JoZEdFaVJuVnpaWEpmYVdSZmEyVjVYMmgwZEhBNkx5OXBaQzVyYUdGdVlXTmhaR1Z0ZVM1dmNtY3ZNemcwTkRJeU1ERTNaVEl5TkRKbE9UazVZbUUwWXpRMVpEa3hPVEZtT0RFTTo0NjUyNTIzODMzMTMxMDA4DA", "userKey": "ag5zfmtoYW4tYWNhZGVteXJUCxIIVXNlckRhdGEiRnVzZXJfaWRfa2V5X2h0dHA6Ly9pZC5raGFuYWNhZGVteS5vcmcvMzg0NDIyMDE3ZTIyNDJlOTk5YmE0YzQ1ZDkxOTFmODEM", "id": "ag5zfmtoYW4tYWNhZGVteXJUCxIIVXNlckRhdGEiRnVzZXJfaWRfa2V5X2h0dHA6Ly9pZC5raGFuYWNhZGVteS5vcmcvMzg0NDIyMDE3ZTIyNDJlOTk5YmE0YzQ1ZDkxOTFmODEM:4652523833131008", "viewed": true}}